#!/usr/bin/env python
# -*- Mode: Python -*-
# vi:si:et:sw=4:sts=4:ts=4

import json

r_codes = {
    200: 'OK',             # OK: Generic
    400: 'NK',             # NK: Generic
    401: 'Invalid cmd',    # NK: Invalid command
    402: 'Cmd exe failed', # NK: Failed to execute cmd
    403: 'Invalid URI',    # NK: Invalid URI
    404: 'URI not found!', # NK: URI not found
    405: 'Encoder fail',   # NK: Failed to encode json msg
}

cmd_id_name = {
    0: 'invalid',
    1: 'play',
    2: 'stop',
    3: 'status',
    4: 'queue_add',
    5: 'queue_del',
    6: 'queue_get',
    7: 'queue_clear',
    8: 'queue_next',
    9: 'queue_prev',
    10:'help',
    11:'quit',
}

cmd_name_id = dict((v,k) for k, v in cmd_id_name.iteritems())

def json_server_enc(cmd_code, res_code=[], data=[]):
    """Returns a json encoded server answer msg including:
    - cmd_code: Code matching received command
    - res_code: Result of executing command
    - data    : Optional, generated by command execution
    """
    data_string = []
    msg = {
        'ack':
            {'res_code':res_code,
             'cmd_code':cmd_code},
        'data':
            data
        }
    try:
        data_string = json.dumps(msg)
    except (ValueError,TypeError) as e:
        print 'ERROR:', e
        msg['ack']['res_code'] = 405
        msg['ack']['cmd_code'] = ''
        msg['data']=[]
        try:
            data_string = json.dumps(msg)
        except TypeError as e:
            print 'ERROR:', e
    return data_string

def json_client_dec(msg):
    """Receives a json encoded answer from a
    server, decodes the message and returns
    cmd_code,cmd_res,data,dec
    """
    cmd_code = None
    cmd_res  = None
    cmd_data = []
    dec      = None
    try:
        dec      = json.loads(msg)
        try:
            cmd_code = dec['ack']['cmd_code']
            cmd_res  = dec['ack']['res_code']
            data     = dec['data']
            for i,d in enumerate(data):
                data[i] = d.encode('ascii','ignore')
        except UnicodeEncodeError as e:
            print e
        except KeyError as e:
            print e
    except Exception as e:
        print e
    return cmd_code,cmd_res,data,dec

def json_client_enc(cmd_name,args=[]):
    """Receives a command and optionally
    some arguments and returns a json
    encoded message to send to the server
    """
    enc = []
    try:
        msg = {
            'cmd':
                {'name':cmd_name,
                 'code':cmd_name_id[cmd_name],
                 },
            'args':
                args
            }
        try:
            enc = json.dumps(msg)
        except (ValueError,TypeError) as e:
            print 'ERROR:', e
    except KeyError as e:
        print e
    return enc


def json_server_dec(msg):
    """Decodes message received from client and
    return cmd, cmd_code and arguments:
    cmd,cmd_code,args
    """
    cmd_name = None
    cmd_code = None
    args     = []
    try:
        dec = json.loads(msg)
        try:
            cmd_name = dec['cmd']['name'].encode('ascii','ignore')
            cmd_code = dec['cmd']['code']
            args     = dec['args']
            for i,arg in enumerate(args):
                args[i] = arg.encode('ascii','ignore')
        except UnicodeEncodeError as e:
            print e
        except KeyError as e:
            print e
    except Exception as e:
        print e
    return cmd_name,cmd_code,args
